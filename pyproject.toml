[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"


[project]
name = "hatch-fancy-pypi-readme"
version = "23.1.0.dev0"
description = "Fancy PyPI READMEs with Hatch"
requires-python = ">=3.7"
keywords = ["hatch", "pypi", "readme", "documentation"]
authors = [{ name = "Hynek Schlawack", email = "hs@ox.cx" }]
license = { text = "MIT" }
classifiers = [
  "Development Status :: 5 - Production/Stable",
  "Framework :: Hatch",
  "License :: OSI Approved :: MIT License",
  "Operating System :: OS Independent",
  "Topic :: Software Development :: Build Tools",

  "Programming Language :: Python",
  "Programming Language :: Python :: 3.7",
  "Programming Language :: Python :: 3.8",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: Implementation :: CPython",
  "Programming Language :: Python :: Implementation :: PyPy",
]
dependencies = [
  "hatchling",
  "tomli; python_version<'3.11'",
  "typing-extensions; python_version<'3.8'",
]

[project.entry-points.hatch]
fancy-pypi-readme = "hatch_fancy_pypi_readme.hooks"

[project.scripts]
hatch-fancy-pypi-readme = "hatch_fancy_pypi_readme.__main__:main"

[project.optional-dependencies]
tests = ["pytest", "build", "wheel"]
dev = ["hatch-fancy-pypi-readme[tests]", "mypy"]

[project.urls]
Documentation = "https://github.com/hynek/hatch-fancy-pypi-readme#readme"
Changelog = "https://github.com/hynek/hatch-fancy-pypi-readme/blob/main/CHANGELOG.md"
"Source Code" = "https://github.com/hynek/hatch-fancy-pypi-readme"
Funding = "https://github.com/sponsors/hynek"
Ko-fi = "https://ko-fi.com/the_hynek"

[project.readme]
content-type = "text/markdown"
text = """# Your ✨Fancy✨ Project Deserves a ✨Fancy✨ PyPI Readme! 🧐

[![PyPI - Version](https://img.shields.io/pypi/v/hatch-fancy-pypi-readme.svg)](https://pypi.org/project/hatch-fancy-pypi-readme)
[![PyPI - Python Version](https://img.shields.io/pypi/pyversions/hatch-fancy-pypi-readme.svg)](https://pypi.org/project/hatch-fancy-pypi-readme)
[![Hatch project](https://img.shields.io/badge/%F0%9F%A5%9A-Hatch-4051b5.svg)](https://github.com/pypa/hatch)
[![License: MIT](https://img.shields.io/badge/license-MIT-C06524)](https://github.com/hynek/hatch-fancy-pypi-readme/blob/main/LICENSE.txt)


*hatch-fancy-pypi-readme* is an MIT-licensed metadata plugin for [*Hatch*](https://hatch.pypa.io/).

Its purpose is to help you to have fancy PyPI readmes – unlike *this* one you’re looking at right now.

Please check out the [documentation](https://github.com/hynek/hatch-fancy-pypi-readme#readme) to see what *hatch-fancy-pypi-readme* can do for you and your projects!
"""


[tool.pytest.ini_options]
addopts = ["-ra", "--strict-markers", "--strict-config"]
xfail_strict = true
testpaths = "tests"
markers = ["slow: marks tests as slow (deselect with '-m \"not slow\"')"]
filterwarnings = ["once::Warning"]


[tool.coverage.run]
parallel = true
branch = true
source = ["hatch_fancy_pypi_readme"]

[tool.coverage.paths]
source = ["src", ".tox/py*/**/site-packages"]

[tool.coverage.report]
show_missing = true
skip_covered = true
omit = ["src/hatch_fancy_pypi_readme/hooks.py"]
exclude_lines = [
  # a more strict default pragma
  "\\# pragma: no cover\\b",

  # allow defensive code
  "^\\s*raise AssertionError\\b",
  "^\\s*raise NotImplementedError\\b",
  "^\\s*return NotImplemented\\b",
  "^\\s*raise$",

  # typing-related code
  "^if (False|TYPE_CHECKING):",
  ": \\.\\.\\.(\\s*#.*)?$",
  "^ +\\.\\.\\.$",
  "-> ['\"]?NoReturn['\"]?:",
]
partial_branches = [
  "pragma: no branch",
  # _cli._fail never returns, creating uncovered branches as far as coverage.py
  # is concerned. See
  # https://github.com/nedbat/coveragepy/issues/1433#issuecomment-1211465570
  "^\\s*_fail\\(",
]


[tool.black]
line-length = 79


[tool.mypy]
strict = true
follow_imports = "normal"
enable_error_code = ["ignore-without-code"]
show_error_codes = true
warn_no_return = true
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "tests.*"
ignore_errors = true


[tool.ruff]
src = ["src", "tests"]
select = [
  "E",   # pycodestyle
  "W",   # pycodestyle
  "F",   # Pyflakes
  "UP",  # pyupgrade
  "N",   # pep8-naming
  "YTT", # flake8-2020
  "S",   # flake8-bandit
  "B",   # flake8-bugbear
  "C4",  # flake8-comprehensions
  "T10", # flake8-debugger
  "ISC", # flake8-implicit-str-concat
  "RET", # flake8-return
  "SIM", # flake8-simplify
  "DTZ", # flake8-datetimez
  "I",   # isort
  "PGH", # pygrep-hooks
  "PLC", # Pylint
  "PIE", # flake8-pie
  "RUF", # ruff
]

ignore = [
  "E501",    # leave line-length enforcement to Black
  "S101",    # assert
  "SIM300",  # Yoda rocks in tests
  "SIM102",  # sometimes nested ifs are cleaner
  "PLC1901", # empty strings are falsey, but are less specific in tests
]


[tool.ruff.isort]
lines-between-types = 1
lines-after-imports = 2
